<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.qlq.mapper.user.TokenMapper" >
  <resultMap id="BaseResultMap" type="cn.qlq.bean.user.Token" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="tokenStr" property="tokenstr" jdbcType="VARCHAR" />
    <result column="losetime" property="losetime" jdbcType="TIMESTAMP" />
    <result column="userfullname" property="userfullname" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, createtime, username, tokenStr, losetime, userfullname
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.qlq.bean.user.TokenExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from token
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from token
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.qlq.bean.user.TokenExample" >
    delete from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.qlq.bean.user.Token" >
    insert into token (id, createtime, username, 
      tokenStr, losetime, userfullname
      )
    values (#{id,jdbcType=INTEGER}, #{createtime,jdbcType=TIMESTAMP}, #{username,jdbcType=VARCHAR}, 
      #{tokenstr,jdbcType=VARCHAR}, #{losetime,jdbcType=TIMESTAMP}, #{userfullname,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.qlq.bean.user.Token" >
    insert into token
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="tokenstr != null" >
        tokenStr,
      </if>
      <if test="losetime != null" >
        losetime,
      </if>
      <if test="userfullname != null" >
        userfullname,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="tokenstr != null" >
        #{tokenstr,jdbcType=VARCHAR},
      </if>
      <if test="losetime != null" >
        #{losetime,jdbcType=TIMESTAMP},
      </if>
      <if test="userfullname != null" >
        #{userfullname,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.qlq.bean.user.TokenExample" resultType="java.lang.Integer" >
    select count(*) from token
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update token
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.username != null" >
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.tokenstr != null" >
        tokenStr = #{record.tokenstr,jdbcType=VARCHAR},
      </if>
      <if test="record.losetime != null" >
        losetime = #{record.losetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userfullname != null" >
        userfullname = #{record.userfullname,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update token
    set id = #{record.id,jdbcType=INTEGER},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      username = #{record.username,jdbcType=VARCHAR},
      tokenStr = #{record.tokenstr,jdbcType=VARCHAR},
      losetime = #{record.losetime,jdbcType=TIMESTAMP},
      userfullname = #{record.userfullname,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.qlq.bean.user.Token" >
    update token
    <set >
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="tokenstr != null" >
        tokenStr = #{tokenstr,jdbcType=VARCHAR},
      </if>
      <if test="losetime != null" >
        losetime = #{losetime,jdbcType=TIMESTAMP},
      </if>
      <if test="userfullname != null" >
        userfullname = #{userfullname,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.qlq.bean.user.Token" >
    update token
    set createtime = #{createtime,jdbcType=TIMESTAMP},
      username = #{username,jdbcType=VARCHAR},
      tokenStr = #{tokenstr,jdbcType=VARCHAR},
      losetime = #{losetime,jdbcType=TIMESTAMP},
      userfullname = #{userfullname,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>